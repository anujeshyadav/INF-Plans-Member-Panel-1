{"version":3,"sources":["views/apps/claims/ViewClaims.js"],"names":["ViewClaims","state","rowData","StartDate","EndDate","list","paginationPageSize","currenPageSize","getPageSize","defaultColDef","sortable","editable","resizable","suppressMenu","columnDefs","headerName","valueGetter","field","width","filter","cellRendererFramework","params","className","data","scriptName","pinned","window","innerWidth","size","color","onClick","runthisfunction","_id","changeHandlerStartDate","e","startDate","moment","target","value","format","setState","changeHandlerEndDate","endDate","alltradeList","axiosConfig","get","then","response","console","log","FT1_type","FT2_type","FT3_type","t1_type","t2_type","t3_type","t4_type","trl_type","t5_type","sl_type","onGridReady","gridApi","api","gridColumnApi","columnApi","paginationGetCurrentPage","paginationGetPageSize","totalPages","paginationGetTotalPages","updateSearchQuery","val","setQuickFilter","filterSize","paginationSetPageSize","Number","submitHandler","catch","error","this","id","swal","buttons","cancel","text","lg","md","sm","col-sm-6","tag","length","right","placeholder","onChange","Ripple","exportDataAsCsv","Consumer","context","gridOptions","rowSelection","colResizeDefault","animateRows","floatingFilter","pagination","pivotPanelShow","enableRtl","direction","React","Component"],"mappings":"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","file":"static/js/222.317eb3ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Input,\r\n  Row,\r\n  Col,\r\n  Button,\r\n  UncontrolledDropdown,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  DropdownToggle,\r\n  Label,\r\n  CustomInput,\r\n} from \"reactstrap\";\r\n\r\nimport axiosConfig from \"../../../axiosConfig\";\r\nimport { ContextLayout } from \"../../../utility/context/Layout\";\r\nimport { AgGridReact } from \"ag-grid-react\";\r\nimport { Eye, Edit, Trash2, ChevronDown } from \"react-feather\";\r\nimport swal from \"sweetalert\";\r\nimport { history } from \"../../../history\";\r\nimport \"../../../assets/scss/plugins/tables/_agGridStyleOverride.scss\";\r\nimport \"../../../assets/scss/pages/users.scss\";\r\nimport moment from \"moment\";\r\nclass ViewClaims extends React.Component {\r\n  state = {\r\n    rowData: [],\r\n    StartDate: \"\",\r\n    EndDate: \"\",\r\n    list: [],\r\n    paginationPageSize: 20,\r\n    currenPageSize: \"\",\r\n    getPageSize: \"\",\r\n    defaultColDef: {\r\n      sortable: true,\r\n      editable: true,\r\n      resizable: true,\r\n      suppressMenu: true,\r\n    },\r\n\r\n    columnDefs: [\r\n      {\r\n        headerName: \"S.No\",\r\n        valueGetter: \"node.rowIndex + 1\",\r\n        field: \"node.rowIndex + 1\",\r\n        width: 100,\r\n        filter: true,\r\n        // checkboxSelection: true,\r\n        // headerCheckboxSelectionFilteredOnly: true,\r\n        // headerCheckboxSelection: true,\r\n      },\r\n\r\n      {\r\n        headerName: \"Details\",\r\n        field: \"scriptName\",\r\n        width: 120,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Claim No.\",\r\n        field: \"scriptName\",\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Claim Applied\",\r\n        field: \"scriptName\",\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Name\",\r\n        field: \"scriptName\",\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Start Date\",\r\n        field: \"scriptName\",\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"End Date\",\r\n        field: \"scriptName\",\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      {\r\n        headerName: \"Policy Name\",\r\n        field: \"scriptName\",\r\n        width: 160,\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"d-flex align-items-center cursor-pointer\">\r\n              <span>{params.data.scriptName}</span>\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n      //   {\r\n      //     headerName: \"status \",\r\n      //     field: \"tradeStatus\",\r\n      //     filter: true,\r\n      //     width: 150,\r\n      //     cellRendererFramework: (params) => {\r\n      //       return params?.data?.FT1_type === \"true\" ||\r\n      //         params?.data?.FT2_type === \"true\" ||\r\n      //         params?.data?.FT3_type === \"true\" ||\r\n      //         params?.data?.t1_type === \"true\" ||\r\n      //         params?.data?.t2_type === \"true\" ||\r\n      //         params?.data?.t3_type === \"true\" ||\r\n      //         params?.data?.t4_type === \"true\" ||\r\n      //         params?.data?.trl_type === \"true\" ||\r\n      //         params?.data?.t5_type === \"true\" ? (\r\n      //         <div className=\"badge badge-pill badge-success\">Completed</div>\r\n      //       ) : params?.data?.sl_type === \"true\" ? (\r\n      //         <div className=\"badge badge-pill badge-danger\">Completed</div>\r\n      //       ) : null;\r\n      //     },\r\n      //   },\r\n      {\r\n        headerName: \"Actions\",\r\n        field: \"sortorder\",\r\n        width: 150,\r\n        pinned: window.innerWidth > 992 ? \"right\" : false,\r\n\r\n        cellRendererFramework: (params) => {\r\n          return (\r\n            <div className=\"actions cursor-pointer\">\r\n              <Trash2\r\n                size={20}\r\n                color=\"red\"\r\n                onClick={() => {\r\n                  this.runthisfunction(params.data._id);\r\n                }}\r\n              />\r\n            </div>\r\n          );\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.alltradeList();\r\n  }\r\n  changeHandlerStartDate = (e) => {\r\n    const startDate = moment(e.target.value).format(\"D-MM-YYYY\");\r\n    this.setState({ StartDate: startDate });\r\n  };\r\n  changeHandlerEndDate = (e) => {\r\n    const endDate = moment(e.target.value).format(\"D-MM-YYYY\");\r\n    this.setState({ EndDate: endDate });\r\n  };\r\n  alltradeList = () => {\r\n    axiosConfig.get(`/admin/tradelist`).then((response) => {\r\n      console.log(response.data.data);\r\n      const rowDataList = response.data.data;\r\n      const rowData = rowDataList.filter((value) => {\r\n        if (\r\n          value.FT1_type === \"true\" ||\r\n          value?.FT2_type === \"true\" ||\r\n          value?.FT3_type === \"true\" ||\r\n          value?.t1_type === \"true\" ||\r\n          value?.t2_type === \"true\" ||\r\n          value?.t3_type === \"true\" ||\r\n          value?.t4_type === \"true\" ||\r\n          value?.trl_type === \"true\" ||\r\n          value?.t5_type === \"true\" ||\r\n          value?.sl_type === \"true\"\r\n        ) {\r\n          return value;\r\n        }\r\n      });\r\n      console.log(\"NewList\", rowData);\r\n      const list = response.data.data;\r\n      this.setState({ rowData });\r\n      this.setState({ list });\r\n    });\r\n  };\r\n  runthisfunction(id) {\r\n    swal(\r\n      `Do You Want To Delete Permanently`,\r\n      \"This item will be deleted immediately\",\r\n\r\n      {\r\n        buttons: {\r\n          cancel: \"Cancel\",\r\n          catch: { text: \"Delete \", value: \"catch\" },\r\n        },\r\n      }\r\n    ).then((value) => {\r\n      switch (value) {\r\n        case \"cancel\":\r\n          break;\r\n        case \"catch\":\r\n          axiosConfig.get(`/admin/dlt_alltrade/${id}`).then(() => {\r\n            this.alltradeList();\r\n          });\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    });\r\n  }\r\n  onGridReady = (params) => {\r\n    this.gridApi = params.api;\r\n    this.gridColumnApi = params.columnApi;\r\n    this.setState({\r\n      currenPageSize: this.gridApi.paginationGetCurrentPage() + 1,\r\n      getPageSize: this.gridApi.paginationGetPageSize(),\r\n      totalPages: this.gridApi.paginationGetTotalPages(),\r\n    });\r\n  };\r\n\r\n  updateSearchQuery = (val) => {\r\n    this.gridApi.setQuickFilter(val);\r\n  };\r\n\r\n  filterSize = (val) => {\r\n    if (this.gridApi) {\r\n      this.gridApi.paginationSetPageSize(Number(val));\r\n      this.setState({\r\n        currenPageSize: val,\r\n        getPageSize: val,\r\n      });\r\n    }\r\n  };\r\n\r\n  submitHandler = (e) => {\r\n    console.log(this.state.StartDate, this.state.EndDate);\r\n    axiosConfig\r\n      .get(\r\n        `/user/tradefilterBydate?start=${this.state.StartDate}&end=${this.state.EndDate}`\r\n      )\r\n      .then((response) => {\r\n        this.setState({ rowData: response.data.data });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  };\r\n  render() {\r\n    const { rowData, columnDefs, defaultColDef } = this.state;\r\n    return (\r\n      <Row className=\"app-user-list \">\r\n        <Col lg=\"12\" md=\"12\" sm=\"12\">\r\n          <Card>\r\n            <h1 col-sm-6 className=\" p-2\">\r\n              View Your Claim Status\r\n            </h1>\r\n            {/* <Row>\r\n              <Col lg=\"6\" md=\"6\" sm=\"6\" className=\"mb-2 ml-2\">\r\n                <Label>Reports:</Label>\r\n                <CustomInput\r\n                  type=\"select\"\r\n                  name=\"allPlan\"\r\n                  defaultValue=\"\"\r\n                  value={this.state.allPlan}\r\n                  onChange={this.changeHandler1}\r\n                >\r\n                  <option value=\"\" disabled>\r\n                    Choose Report\r\n                  </option>\r\n                  <option value=\"\">Order Report</option>\r\n                  <option value=\"Quote Report\">Quote Report</option>\r\n                  <option value=\"Order Items Report\">Order Items Report</option>\r\n                </CustomInput>\r\n              </Col>\r\n            </Row> */}\r\n            <CardBody>\r\n              {this.state.rowData === null ? null : (\r\n                <div className=\"ag-theme-material w-100 my-2 ag-grid-table\">\r\n                  <div className=\"d-flex flex-wrap justify-content-between align-items-center\">\r\n                    <div className=\"mb-1\">\r\n                      <UncontrolledDropdown className=\"p-1 ag-dropdown\">\r\n                        <DropdownToggle tag=\"div\">\r\n                          {this.gridApi\r\n                            ? this.state.currenPageSize\r\n                            : \"\" * this.state.getPageSize -\r\n                              (this.state.getPageSize - 1)}{\" \"}\r\n                          -{\" \"}\r\n                          {this.state.rowData.length -\r\n                            this.state.currenPageSize * this.state.getPageSize >\r\n                          0\r\n                            ? this.state.currenPageSize * this.state.getPageSize\r\n                            : this.state.rowData.length}{\" \"}\r\n                          of {this.state.rowData.length}\r\n                          <ChevronDown className=\"ml-50\" size={15} />\r\n                        </DropdownToggle>\r\n                        <DropdownMenu right>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(20)}\r\n                          >\r\n                            20\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(50)}\r\n                          >\r\n                            50\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(100)}\r\n                          >\r\n                            100\r\n                          </DropdownItem>\r\n                          <DropdownItem\r\n                            tag=\"div\"\r\n                            onClick={() => this.filterSize(134)}\r\n                          >\r\n                            134\r\n                          </DropdownItem>\r\n                        </DropdownMenu>\r\n                      </UncontrolledDropdown>\r\n                    </div>\r\n                    <div className=\"d-flex flex-wrap justify-content-between mb-1\">\r\n                      <div className=\"table-input mr-1\">\r\n                        <Input\r\n                          placeholder=\"search...\"\r\n                          onChange={(e) =>\r\n                            this.updateSearchQuery(e.target.value)\r\n                          }\r\n                          value={this.state.value}\r\n                        />\r\n                      </div>\r\n                      <div className=\"export-btn\">\r\n                        <Button.Ripple\r\n                          color=\"primary\"\r\n                          onClick={() => this.gridApi.exportDataAsCsv()}\r\n                        >\r\n                          Export as CSV\r\n                        </Button.Ripple>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <ContextLayout.Consumer>\r\n                    {(context) => (\r\n                      <AgGridReact\r\n                        gridOptions={{}}\r\n                        rowSelection=\"multiple\"\r\n                        defaultColDef={defaultColDef}\r\n                        columnDefs={columnDefs}\r\n                        rowData={rowData}\r\n                        onGridReady={this.onGridReady}\r\n                        colResizeDefault={\"shift\"}\r\n                        animateRows={true}\r\n                        floatingFilter={false}\r\n                        pagination={true}\r\n                        paginationPageSize={this.state.paginationPageSize}\r\n                        pivotPanelShow=\"always\"\r\n                        enableRtl={context.state.direction === \"rtl\"}\r\n                      />\r\n                    )}\r\n                  </ContextLayout.Consumer>\r\n                </div>\r\n              )}\r\n            </CardBody>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    );\r\n  }\r\n}\r\nexport default ViewClaims;\r\n"],"sourceRoot":""}